{"version":3,"sources":["unavailable.jpg","spinner.svg","service.js","errors.js","context.js","Login.jsx","Logout.jsx","TopRated.jsx","Recommendation.jsx","Result.jsx","Search.jsx","HomepageBtn.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","convertNetworkError","Promise","reject","error","convertError","response","ok","json","then","err","convertImdbIdtoId","imdbId","TMDB","fetch","method","catch","errors","DEFAULT","USERNAME_REQUIRED","LACK_KEYWORD","NETWORK_ERROR","NOT_ACCEPTABLE","LOGIN_REQUIRED","LOGIN_UNAUTHORIZED","MESSAGE_REQUIRED","MOVIE_NOT_FOUND","MovieContext","React","createContext","default","ErrorContext","Login","onLogin","useState","username","setUsername","isLoading","setIsLoading","useContext","setError","performLogin","e","preventDefault","headers","Headers","body","JSON","stringify","fetchLogin","userInfo","className","onSubmit","onChange","target","value","alt","src","spinner","type","disabled","Logout","onLogout","onClick","TopRated","topArray","setTopArray","movieState","setMovieState","useEffect","results","slice","message","searchById","id","movieArray","map","movie","key","indexOf","poster_path","title","release_date","vote_average","Recommendation","recommendationList","setRecommendationList","getRecommendation","imdbID","movie_results","fetchRecommendation","recommendationArray","introduction","unavailablePic","Title","Result","comment","setComment","myComment","setMyComment","window","scrollTo","getDetail","length","Error","result_poster","fetchDetail","Year","imdb_id","overview","PosterUrl","fetchCommentsFromServer","sendComment","sendCommentToServer","handleInput","Search","result","searchOmdb","keyword","console","log","placeholder","handleChange","HomepageBtn","App","content","isLoggedIn","userState","setUserState","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.508af2a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unavailable.11bbcf00.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spinner.05360875.svg\";","const convertNetworkError = () => Promise.reject({ error: \"NETWORK_ERROR\" });\n\nconst convertError = (response) => {\n  if (response.ok) {\n    return response.json();\n  }\n  return response.json().then((err) => Promise.reject(err));\n};\n\nexport const fetchTopRated = () => {\n  const TMDB =\n    \"https://api.themoviedb.org/3/movie/top_rated?api_key=c946c30088ad16d4120dcc22233c5fdc&language=en-US&page=1\";\n  return fetch(TMDB, {\n    method: \"GET\",\n  })\n    .catch(convertNetworkError)\n    .then(convertError);\n};\n\nexport const convertImdbIdtoId = (imdbId) => {\n  const TMDB = `https://api.themoviedb.org/3/find/${imdbId}?api_key=c946c30088ad16d4120dcc22233c5fdc&language=en-US&external_source=imdb_id`;\n  return fetch(TMDB, {\n    method: \"GET\",\n  })\n    .catch(convertNetworkError)\n    .then(convertError);\n};\n\nexport const fetchRecommendation = (id) => {\n  const TMDB = `https://api.themoviedb.org/3/movie/${id}/recommendations?api_key=c946c30088ad16d4120dcc22233c5fdc&language=en-US&page=1`;\n  return fetch(TMDB, {\n    method: \"GET\",\n  })\n    .catch(convertNetworkError)\n    .then(convertError);\n};\nexport const fetchDetail = (id) => {\n  const TMDB = `https://api.themoviedb.org/3/movie/${id}?api_key=c946c30088ad16d4120dcc22233c5fdc&language=en-US`;\n  return fetch(TMDB, {\n    method: \"GET\",\n  })\n    .catch(convertNetworkError)\n    .then(convertError);\n};\n\nexport const fetchOMDB = (keyword) => {\n  const OMDB = \"https://www.omdbapi.com/?apikey=c27a2924&s=\";\n  const url = OMDB + keyword;\n  return fetch(url, {\n    method: \"GET\",\n  })\n    .catch(convertNetworkError)\n    .then(convertError);\n};\n\nexport const fetchLoginStatus = (username) => {\n  return fetch(\"/session\", {\n    method: \"GET\",\n  })\n    .catch(convertNetworkError)\n    .then(convertError);\n};\n\nexport const fetchLogin = (username) => {\n  return fetch(\"/session\", {\n    method: \"POST\",\n    headers: new Headers({\n      \"content-type\": \"application/json\",\n    }),\n    body: JSON.stringify({ username }),\n  })\n    .catch(convertNetworkError)\n    .then(convertError);\n};\n\nexport const fetchLogout = () => {\n  return fetch(\"/session\", {\n    method: \"DELETE\",\n  })\n    .catch(convertNetworkError)\n    .then((response) => {\n      return response.ok;\n    });\n};\nexport const fetchCommentsFromServer = (id) => {\n  return fetch(`/comments/${id}`, {\n    method: \"GET\",\n  })\n    .catch(convertNetworkError)\n    .then(convertError);\n};\n\nexport const sendCommentToServer = (id, comment) => {\n  return fetch(\"/comments\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ id: id, comment: comment }),\n  })\n    .catch(convertNetworkError)\n    .then(convertError);\n};\n\nexport const updateCommentToServer = (id, comment) => {\n  return fetch(\"/comments\", {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      id: id,\n      comment: comment,\n    }),\n  })\n    .catch(convertNetworkError)\n    .then(convertError);\n};\n\nexport const deleteCommentInServer = (id) => {\n  return fetch(`/comments/${id}`, {\n    method: \"DELETE\",\n  })\n    .catch(convertNetworkError)\n    .then(convertError);\n};\n","const errors = {\n  DEFAULT: \"Oh no!  Something went wrong, please try again\",\n  USERNAME_REQUIRED: \"Username is required\",\n  LACK_KEYWORD: \"Please enter a more specific key word\",\n  NETWORK_ERROR: \"There was a problem reaching your network, please try again\",\n  NOT_ACCEPTABLE:\n    'Your username cannot include \"dog\" or empty space, please log in with another name',\n  LOGIN_REQUIRED: \"You must be logged in to view this content\",\n  LOGIN_UNAUTHORIZED: \"You are not permitted to view this content.Please Log in.\",\n  MESSAGE_REQUIRED: \"You cannot send an empty comment.\",\n  MOVIE_NOT_FOUND:\"Movie not found. Please try anoterh keyword.\"\n};\n\nexport default errors;\n","import React from 'react'; \n\nconst MovieContext = React.createContext({\n\tdefault:\"doesn't matter\"\n});\nconst ErrorContext = React.createContext({\n\tdefault:\"doesn't matter\"\n});\n\n export {MovieContext, ErrorContext} ;\n\n\n\n\n\n\n\n\n","import React, { useState, useContext } from \"react\";\nimport { fetchLogin } from \"./service\";\nimport errors from \"./errors\";\nimport { ErrorContext } from \"./context\";\nimport spinner from \"./spinner.svg\";\n\nconst Login = ({ onLogin }) => {\n  const [username, setUsername] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [setError] = useContext(ErrorContext);\n\n  const performLogin = (e) => {\n    e.preventDefault();\n    if (!username) {\n      setError(errors.USERNAME_REQUIRED);\n      return;\n    }\n    setError(\"\");\n    setIsLoading(true);\n\n    fetchLogin(username)\n      .then((userInfo) => {\n        onLogin(userInfo.username);\n      })\n      .catch((err) => {\n        setError(errors[err.error || \"DEFAULT\"]);\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"login\">\n      <form onSubmit={(e)=>performLogin(e)}>\n        <input onChange={(e) => setUsername(e.target.value)} />\n        {isLoading ? (\n          <img alt=\"spinner\" src={spinner} />\n        ) : (\n          <button type=\"submit\" disabled={!username}>\n            Login\n          </button>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useContext } from \"react\";\nimport { fetchLogout } from \"./service\";\nimport errors from \"./errors\";\nimport { ErrorContext } from \"./context\";\n\nconst Logout = ({ onLogout }) => {\n  const [error, setError] = useContext(ErrorContext);\n\n  const performLogout = () => {\n    fetchLogout()\n      .then(() => {\n        onLogout();\n      })\n      .catch((err) => {\n        setError(errors[err.error || \"DEFAULT\"]);\n      });\n  };\n\n  return (\n    <button className=\"header-btn\" onClick={performLogout}>\n      {\" \"}\n      Log out{\" \"}\n    </button>\n  );\n};\n\nexport default Logout;\n","import React, {useState, useEffect, useContext} from 'react';\nimport { MovieContext, ErrorContext } from './context';\nimport errors from \"./errors\";\nimport {fetchTopRated} from './service';\n\nconst TopRated = () =>{\n\tconst [topArray, setTopArray] = useState([]);\n\tconst [movieState, setMovieState] = useContext(MovieContext);\n\tconst [setError] = useContext(ErrorContext);\n\t\n\tuseEffect(() =>{\n\t\tfetchTopRated()\n      .then((json) => {\n        setTopArray(json.results.slice(0, 4));\n      })\n      .catch((err) => {\n        setError(errors[err.message || \"DEFAULT\"]);\n      });\n\t} , [])\n\t\n\tconst searchById =(id)=>{\n\t\tsetMovieState({...movieState, id:id});\n\t}\n\tconst imgURL = \"https://image.tmdb.org/t/p/w500/\";\n\t\n\tconst movieArray = topArray.map((movie)=>{\t\n\treturn (\n\t\t<li key={topArray.indexOf(movie)} className=\"top-movie\">\n\t\t\t<img src= {imgURL + movie.poster_path}  className=\"clickable\" onClick ={() => searchById(movie.id)} alt='poster'/> \n\t\t\t<p className=\"clickable\" onClick ={() => searchById(movie.id)}> {movie.title} </p>\n\t\t\t<p className=\"time\"> {movie.release_date} </p>\n\t\t\t<p className=\"rating\"> Rating: {movie.vote_average} </p>\n\t\t\t<button onClick ={() => searchById(movie.id)}> details</button>\n\t\t</li>)\n\t});\n\n\n\treturn (\n\t\t<div>\n\t\t\t<h2> Top Rated Movies: </h2>\n\t\t\t<ol className=\"top-rated-movies\">\n\t\t\t{movieArray}\n\t\t\t</ol>\n\t\t</div>)\n}\n\nexport default TopRated;","import React, { useState, useContext, useEffect } from \"react\";\nimport { MovieContext, ErrorContext } from \"./context\";\nimport errors from \"./errors\";\nimport { fetchRecommendation, convertImdbIdtoId } from \"./service\";\nimport unavailablePic from \"./unavailable.jpg\";\n\nconst Recommendation = () => {\n  const [ movieState, setMovieState] = useContext(MovieContext);\n  const [recommendationList, setRecommendationList] = useState([]);\n  const [setError] = useContext(ErrorContext);\n\n  useEffect(() => {\n    if (movieState.id) {\n      getRecommendation(movieState.id);\n      setError(\"\");\n    } else {\n      convertImdbIdtoId(movieState.imdbID)\n        .then((json) => {\n          const id = json.movie_results[0].id;\n          getRecommendation(id);\n        })\n        .catch((err) => {\n          setError(errors[err.error || \"DEFAULT\"]);\n        });\n    }\n  }, [movieState.imdbID, movieState.id]);\n\n  const getRecommendation = (id) => {\n    return fetchRecommendation(id)\n      .then((json) => {\n        setRecommendationList(json.results.slice(0, 3));\n        setError(\"\");\n      })\n      .catch((err) => {\n        setError(errors[err.error || \"DEFAULT\"]);\n      });;\n  };\n  const searchById = (id) => {\n    setMovieState({ ...movieState, id: id });\n  };\n\n  const imgURL = \"https://image.tmdb.org/t/p/w500/\";\n  const recommendationArray = recommendationList.map((movie) => {\n    let introduction;\n    if (movie.poster_path) {\n      introduction = (\n        <img\n          src={imgURL + movie.poster_path}\n          className=\"clickable\"\n          onClick={() => searchById(movie.id)}\n          alt=\"poster\"\n        />\n      );\n    } else {\n      introduction = (\n        <img\n          src={unavailablePic}\n          alt=\"poster unavailable\"\n          className=\"clickable\"\n          onClick={() => searchById(movie.id)}\n        />\n      );\n    }\n    return (\n      <li key={recommendationList.indexOf(movie)}>\n        <p className=\"clickable\" onClick={() => searchById(movie.id)}>\n          {movie.title}\n        </p>\n        <p className=\"time\"> {movie.release_date} </p>\n        <p className=\"rating\"> Rating: {movie.vote_average} </p>\n        {introduction}\n        <p>\n          <button onClick={() => searchById(movie.id)}> details</button>\n        </p>\n      </li>\n    );\n  });\n\n  return (\n    <div>\n      <h2>\n        Recommendation according to <span className=\"highlight-title\">{movieState.Title}</span>\n      </h2>\n      <ul className=\"recommendation\">{recommendationArray}</ul>\n    </div>\n  );\n};\n\nexport default Recommendation;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { MovieContext, ErrorContext } from \"./context\";\nimport errors from \"./errors\";\nimport Recommendation from \"./Recommendation\";\nimport {\n  fetchDetail,\n  convertImdbIdtoId,\n  fetchCommentsFromServer,\n  sendCommentToServer,\n  deleteCommentInServer,\n} from \"./service\";\nimport unavailablePic from \"./unavailable.jpg\";\n\nconst Result = () => {\n  const [movieState, setMovieState] = useContext(MovieContext);\n  const [setError] = useContext(ErrorContext);\n  const [comment, setComment] = useState(\"\");\n  const [myComment, setMyComment] = useState(\"\");\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    if (movieState.id) {\n      setComment(\"\");\n      getDetail(movieState.id);\n    } else {\n      convertImdbIdtoId(movieState.imdbID)\n        .then((json) => {\n          if (json.movie_results.length === 0) {\n            throw new Error(\"LACK_KEYWORD\");\n          } else {\n            const id = json.movie_results[0].id;\n            setMovieState({ ...movieState, id: id });\n            setComment(\"\");\n            setError(\"\");\n          }\n        })\n        .catch((err) => {\n          setError(errors[err.error || err.message || \"DEFAULT\"]);\n        });\n    }\n  }, [movieState.id, movieState.imdbID]);\n\n  const getDetail = (id) => {\n    const imgURL = \"https://image.tmdb.org/t/p/w500/\";\n    return fetchDetail(id)\n      .then((json) => {\n        setMovieState({\n          Title: json.title,\n          Year: json.release_date,\n          imdbID: json.imdb_id,\n          id: json.id,\n          overview: json.overview,\n          PosterUrl: imgURL + json.poster_path,\n        });\n        fetchCommentsFromServer(json.id).then((json) => {\n          setMyComment(json.comment);\n        });\n\n        setError(\"\");\n      })\n      .catch((err) => {\n        setError(errors[err.error || err || \"DEFAULT\"]);\n      });\n  };\n\n  const handleInput = (e) => {\n    setComment(e.target.value);\n  };\n  const sendComment = (e) => {\n    e.preventDefault();\n    sendCommentToServer(movieState.id, comment)\n      .then((json) => {\n        setMyComment(json.comment);\n        setComment(\"\");\n      })\n      .catch((err) => {\n        setError(errors[err.error || err || \"DEFAULT\"]);\n      });\n  };\n\n  const deleteComment = () => {\n    deleteCommentInServer(movieState.id)\n      .then((json) => {\n        setMyComment(\"\");\n      })\n      .catch((err) => {\n        setError(errors[err.error || err || \"DEFAULT\"]);\n      });\n  };\n  let result_poster;\n  {\n    if (\n      !movieState.PosterUrl ||\n      movieState.PosterUrl === \"https://image.tmdb.org/t/p/w500/N/A\"\n    ) {\n      result_poster = <img src={unavailablePic} alt=\"poster unavailable\" />;\n    } else {\n      result_poster = <img src={movieState.PosterUrl} alt=\"poster\" />;\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"flex-box\">\n        <div className=\"result-detail\">\n          <p className=\"title\"> Title: {movieState.Title} </p>\n          <p className=\"time\"> Year: {movieState.Year} </p>\n          <p className=\"overview\">\n            {\" \"}\n            Overview: {movieState.overview || \"Not Available\"}\n          </p>\n          <p>My comment:{myComment}</p>{\" \"}\n          <button onClick={deleteComment} disabled={!myComment}>\n            delete\n          </button>\n          <form onSubmit={(e) => sendComment(e)}>\n            <label>\n              New Comment:\n              <input value={comment} onChange={(e) => handleInput(e)}></input>\n            </label>\n            <button type=\"submit\">add/update</button>\n          </form>\n        </div>\n        <div className=\"img-detail\">{result_poster}</div>\n      </div>\n\n      <Recommendation />\n    </div>\n  );\n};\n\nexport default Result;\n","import React, { useContext } from \"react\";\nimport { MovieContext, ErrorContext } from \"./context\";\nimport TopRated from \"./TopRated\";\nimport errors from \"./errors\";\nimport Result from \"./Result\";\nimport { fetchOMDB } from \"./service\";\n\nconst Search = () => {\n  const [movieState, setMovieState] = useContext(MovieContext);\n  const [setError] = useContext(ErrorContext);\n\n  const searchOmdb = (e) => {\n    e.preventDefault()\n    fetchOMDB(movieState.keyword)\n      .then((json) => {\n        if (json.Error) {\n          throw new Error(\"MOVIE_NOT_FOUND\");\n        } else {\n          setMovieState({\n            imdbID: json.Search[0].imdbID,\n            Title: json.Search[0].Title,\n            Year: json.Search[0].Year,\n          });\n        }\n      })\n      .catch((err) => {\n        setError(errors[err.error || err.message || \"DEFAULT\"]);\n        setMovieState({});\n      });\n  };\n\n  const handleChange = (e) => {\n    setMovieState({ ...movieState, keyword: e.target.value });\n  };\n\n  let result;\n  if (movieState.imdbID || movieState.id) {\n    result = <Result />;\n  } else {\n    result = <TopRated />;\n  }\n  console.log(movieState);\n  return (\n    <div>\n      <form onSubmit={(e)=>searchOmdb(e)} className=\"search-panel\">\n        <input\n          type=\"text\"\n          value={movieState.keyword || \"\"}\n          placeholder=\"Search...\"\n          onChange={(e) => handleChange(e)}\n        />\n        <button type=\"submit\" disabled={!movieState.keyword}>\n          {\" \"}\n          Search{\" \"}\n        </button>\n      </form>\n      {result}\n    </div>\n  );\n};\nexport default Search;\n","import React, { useContext } from \"react\";\nimport { MovieContext } from \"./context\";\n\nconst HomepageBtn = () => {\n  const [movieState, setMovieState] = useContext(MovieContext);\n  return (\n    <button className=\"header-btn\"\n      onClick={() => {\n        setMovieState({});\n      }}\n    >\n      return to homepage\n    </button>\n  );\n};\n\nexport default HomepageBtn;\n","import React, { useState, useEffect } from \"react\";\nimport Login from \"./Login\";\nimport Logout from \"./Logout\";\nimport Search from \"./Search\";\nimport HomepageBtn from \"./HomepageBtn\";\nimport errors from \"./errors\";\nimport { ErrorContext, MovieContext } from \"./context\";\nimport { fetchLoginStatus } from \"./service\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [userState, setUserState] = useState({ isLoggedIn: false });\n  const [movieState, setMovieState] = useState({});\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    fetchLoginStatus()\n      .then((json) => {\n        setUserState({\n          isLoggedIn: true,\n          username: json.username,\n        });\n      })\n      .catch((err) => {\n        setError(errors[err.error || err || \"DEFAULT\"]);\n      });\n  }, [userState.username]);\n\n  const login = (username) => {\n    setUserState({\n      isLoggedIn: true,\n      username,\n    });\n  };\n\n  const logout = () => {\n    setUserState({\n      isLoggedIn: false,\n    });\n  };\n\n  let content;\n  if (!userState.isLoggedIn) {\n    content = (\n      <div>\n        <Login onLogin={login} />\n      </div>\n    );\n  } else {\n    content = (\n      <MovieContext.Provider value={[movieState, setMovieState]}>\n        <div className=\"header\">\n          <HomepageBtn />\n          <Logout onLogout={logout} />\n        </div>\n        <Search />\n      </MovieContext.Provider>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Your Movie Database</h1>\n      <p className=\"error\">{error}</p>\n      <ErrorContext.Provider value={[setError]}>\n        {content}\n      </ErrorContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}