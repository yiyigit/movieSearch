{"ast":null,"code":"var _jsxFileName = \"/Users/yiyizhou/Desktop/NEU/info6250 Web tool/demo/final-project/src/Recommendation.jsx\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport MovieContext from './context';\nimport { fetchRecommendation, convertImdbIdtoId } from './service';\n\nconst Recommendation = () => {\n  const [movieState, setMovieState] = useContext(MovieContext);\n  const [recommendationList, setRecommendationList] = useState([]);\n  useEffect(() => {\n    if (movieState.id) {} else {\n      convertImdbIdtoId(movieState.imdbID).then(json => {\n        const id = json.movie_results[0].id;\n        fetchRecommendation(id).then(json => {\n          setRecommendationList(json.results.slice(0, 3));\n        });\n      });\n    }\n  }, [movieState.imdbID, movieState.id]);\n\n  const getRecommendation = id => {\n    fetchRecommendation(id).then(json => {\n      setRecommendationList(json.results.slice(0, 3));\n    });\n  };\n\n  const searchById = id => {\n    setMovieState({ ...movieState,\n      id: id\n    });\n  };\n\n  const imgURL = \"https://image.tmdb.org/t/p/w500/\";\n  const recommendationArray = recommendationList.map(movie => {\n    let introduction;\n\n    if (movie.poster_path) {\n      introduction = /*#__PURE__*/React.createElement(\"img\", {\n        src: imgURL + movie.poster_path,\n        alt: \"poster\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 19\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: recommendationList.indexOf(movie),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 4\n      }\n    }, \" Title: \", movie.title, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 4\n      }\n    }, \" Year: \", movie.release_date, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 4\n      }\n    }, \" Rating :\", movie.vote_average, \" \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => searchById(movie.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 4\n      }\n    }, \" details\"), introduction);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }\n  }, \"Recommendation according to \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 35\n    }\n  }, movieState.Title), \" \"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"recommendation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }\n  }, recommendationArray));\n};\n\nexport default Recommendation;","map":{"version":3,"sources":["/Users/yiyizhou/Desktop/NEU/info6250 Web tool/demo/final-project/src/Recommendation.jsx"],"names":["React","useState","useContext","useEffect","MovieContext","fetchRecommendation","convertImdbIdtoId","Recommendation","movieState","setMovieState","recommendationList","setRecommendationList","id","imdbID","then","json","movie_results","results","slice","getRecommendation","searchById","imgURL","recommendationArray","map","movie","introduction","poster_path","indexOf","title","release_date","vote_average","Title"],"mappings":"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","sourcesContent":["import React, {useState,useContext,useEffect} from 'react';\nimport MovieContext from './context';\nimport {fetchRecommendation, convertImdbIdtoId} from './service';\n\nconst Recommendation = () =>{\n\tconst [movieState, setMovieState]  = useContext(MovieContext);\n\tconst [recommendationList, setRecommendationList] = useState([]);\n\t\n\tuseEffect(()=>{\n\t\tif(movieState.id){\n\t\t\t\n\t\t}\n\t\telse{\n\t\tconvertImdbIdtoId(movieState.imdbID)\n\t\t.then((json) =>{\n\t\t\t const id = json.movie_results[0].id;\n\t    \t fetchRecommendation(id)\n\t\t\t.then(json =>{\n\t\t\t\tsetRecommendationList(json.results.slice(0,3));\n\t\t\t})\n\t\t  });\n\t\t}\n\t},[movieState.imdbID, movieState.id])\n\t\n\tconst getRecommendation = (id)=>{\n\t\tfetchRecommendation(id)\n\t\t\t.then(json =>{\n\t\t\t\tsetRecommendationList(json.results.slice(0,3));\n\t\t\t})\n\n\t}\n\tconst searchById =(id)=>{\n\t\tsetMovieState({...movieState, id:id});\n\t}\n\n\tconst imgURL = \"https://image.tmdb.org/t/p/w500/\";\n\tconst recommendationArray = recommendationList.map((movie)=>{\n\t\tlet introduction;\t\n\t\tif(movie.poster_path){\n\t\t\tintroduction = <img src= {imgURL + movie.poster_path} alt='poster'/> \n\t\t}\n\treturn (\n\t\t<li key={recommendationList.indexOf(movie)}>\n\t\t\t<p> Title: {movie.title} </p>\n\t\t\t<p> Year: {movie.release_date} </p>\n\t\t\t<p> Rating :{movie.vote_average} </p>\n\t\t\t<button onClick ={() => searchById(movie.id)}> details</button>\n\t\t\t{introduction}\n\t\t\t\n\t\t</li>)\n\t});\n\n\treturn (<div > \n\t\t<h2>Recommendation according to <span>{movieState.Title}</span> </h2>\n\t\t<ul className=\"recommendation\">\n\t\t{recommendationArray}\n\t\t</ul>\n\n\t\t</div>)\n}\n\nexport default Recommendation;"]},"metadata":{},"sourceType":"module"}