{"ast":null,"code":"const convertNetworkError = () => Promise.reject({\n  error: 'NETWORK_ERROR'\n});\n\nconst convertError = response => {\n  if (response.ok) {\n    return response.json();\n  }\n\n  return response.json().then(err => Promise.reject(err));\n};\n\nexport const fetchOMDB = keyword => {\n  const OMDB = \"https://www.omdbapi.com/?apikey=c27a2924&s=\";\n  const url = OMDB + keyword;\n  return fetch(url, {\n    method: 'GET'\n  }).catch(convertNetworkError).then(convertError);\n};\nexport const fetchLoginStatus = username => {\n  return fetch('/session', {\n    method: 'GET'\n  }).catch(convertNetworkError).then(convertError);\n};\nexport const fetchLogin = username => {\n  return fetch('/session', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      username\n    })\n  }).catch(convertNetworkError).then(convertError);\n};\nexport const fetchLogout = () => {\n  return fetch('/session', {\n    method: 'DELETE'\n  }).catch(convertNetworkError).then(response => {\n    return response.ok;\n  });\n};\nexport const getMessagesFromServer = () => {\n  return fetch('/messages', {\n    method: \"GET\"\n  }).catch(convertNetworkError).then(convertError);\n};\nexport const sendMessageToServer = formedMessage => {\n  return fetch('/messages', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formedMessage)\n  }).catch(convertNetworkError).then(convertError);\n};\nexport const getUsersFromServer = () => {\n  return fetch('/users', {\n    method: \"GET\"\n  }).catch(convertNetworkError).then(convertError);\n};","map":{"version":3,"sources":["/Users/yiyizhou/Desktop/NEU/info6250 Web tool/demo/final-project/src/service.js"],"names":["convertNetworkError","Promise","reject","error","convertError","response","ok","json","then","err","fetchOMDB","keyword","OMDB","url","fetch","method","catch","fetchLoginStatus","username","fetchLogin","headers","Headers","body","JSON","stringify","fetchLogout","getMessagesFromServer","sendMessageToServer","formedMessage","getUsersFromServer"],"mappings":"AAAA,MAAMA,mBAAmB,GAAG,MAAMC,OAAO,CAACC,MAAR,CAAgB;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAhB,CAAlC;;AAEA,MAAMC,YAAY,GAAIC,QAAD,IAAa;AAC9B,MAAGA,QAAQ,CAACC,EAAZ,EAAe;AACb,WAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,SAAOF,QAAQ,CAACE,IAAT,GAAgBC,IAAhB,CAAqBC,GAAG,IAAIR,OAAO,CAACC,MAAR,CAAeO,GAAf,CAA5B,CAAP;AACH,CALD;;AAMA,OAAO,MAAMC,SAAS,GAAIC,OAAD,IAAY;AACnC,QAAMC,IAAI,GAAG,6CAAb;AACA,QAAMC,GAAG,GAAGD,IAAI,GAAGD,OAAnB;AACA,SAAOG,KAAK,CAACD,GAAD,EAAM;AAChBE,IAAAA,MAAM,EAAC;AADS,GAAN,CAAL,CAENC,KAFM,CAEChB,mBAFD,EAGNQ,IAHM,CAGAJ,YAHA,CAAP;AAID,CAPM;AASP,OAAO,MAAMa,gBAAgB,GAAIC,QAAD,IAAc;AAC5C,SAAOJ,KAAK,CAAC,UAAD,EAAa;AACvBC,IAAAA,MAAM,EAAE;AADe,GAAb,CAAL,CAGNC,KAHM,CAGChB,mBAHD,EAINQ,IAJM,CAIAJ,YAJA,CAAP;AAKD,CANM;AAQP,OAAO,MAAMe,UAAU,GAAID,QAAD,IAAc;AACtC,SAAOJ,KAAK,CAAC,UAAD,EAAa;AACvBC,IAAAA,MAAM,EAAE,MADe;AAEvBK,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,sBAAgB;AADG,KAAZ,CAFc;AAKvBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,MAAAA;AAAF,KAAf;AALiB,GAAb,CAAL,CAONF,KAPM,CAOChB,mBAPD,EAQNQ,IARM,CAQAJ,YARA,CAAP;AASD,CAVM;AAYP,OAAO,MAAMqB,WAAW,GAAG,MAAM;AAC/B,SAAOX,KAAK,CAAC,UAAD,EAAa;AACvBC,IAAAA,MAAM,EAAE;AADe,GAAb,CAAL,CAGNC,KAHM,CAGChB,mBAHD,EAINQ,IAJM,CAIAH,QAAQ,IAAI;AACjB,WAAOA,QAAQ,CAACC,EAAhB;AACD,GANM,CAAP;AAOD,CARM;AASP,OAAQ,MAAMoB,qBAAqB,GAAG,MAAK;AACzC,SAAOZ,KAAK,CAAC,WAAD,EAAa;AAACC,IAAAA,MAAM,EAAC;AAAR,GAAb,CAAL,CACJC,KADI,CACGhB,mBADH,EAEJQ,IAFI,CAEEJ,YAFF,CAAP;AAGC,CAJK;AAMR,OAAO,MAAMuB,mBAAmB,GAAIC,aAAD,IAAiB;AAClD,SAAQd,KAAK,CAAC,WAAD,EAAc;AAACC,IAAAA,MAAM,EAAC,MAAR;AACrBK,IAAAA,OAAO,EAAC;AAAC,sBAAe;AAAhB,KADa;AAErBE,IAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeI,aAAf;AAFgB,GAAd,CAAL,CAIHZ,KAJG,CAIIhB,mBAJJ,EAKHQ,IALG,CAKGJ,YALH,CAAR;AAMC,CAPI;AASL,OAAQ,MAAMyB,kBAAkB,GAAG,MAAK;AACxC,SAAOf,KAAK,CAAC,QAAD,EAAU;AAACC,IAAAA,MAAM,EAAC;AAAR,GAAV,CAAL,CACJC,KADI,CACEhB,mBADF,EAEJQ,IAFI,CAEEJ,YAFF,CAAP;AAGC,CAJO","sourcesContent":["const convertNetworkError = () => Promise.reject( { error: 'NETWORK_ERROR' });\n\nconst convertError = (response) =>{\n    if(response.ok){\n      return response.json();\n    }\n    return response.json().then(err => Promise.reject(err));\n};\nexport const fetchOMDB = (keyword) =>{\n  const OMDB = \"https://www.omdbapi.com/?apikey=c27a2924&s=\"\n  const url = OMDB + keyword;\n  return fetch(url, {\n    method:'GET'})\n  .catch( convertNetworkError )\n  .then( convertError );\n}\n\nexport const fetchLoginStatus = (username) => {\n  return fetch('/session', {\n    method: 'GET',\n  })\n  .catch( convertNetworkError )\n  .then( convertError );\n};\n\nexport const fetchLogin = (username) => {\n  return fetch('/session', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json',\n    }),\n    body: JSON.stringify({ username }),\n  })\n  .catch( convertNetworkError )\n  .then( convertError );\n};\n\nexport const fetchLogout = () => {\n  return fetch('/session', {\n    method: 'DELETE',\n  })\n  .catch( convertNetworkError)\n  .then( response => {\n    return response.ok;\n  });\n};\nexport  const getMessagesFromServer = () =>{\n  return fetch('/messages',{method:\"GET\"})\n    .catch( convertNetworkError )\n    .then( convertError );\n  };\n\nexport const sendMessageToServer = (formedMessage)=>{\n  return  fetch('/messages', {method:'POST', \n        headers:{'Content-Type':'application/json'}, \n        body:JSON.stringify(formedMessage)\n      })\n      .catch( convertNetworkError )\n      .then( convertError )\n  };\n\n  export  const getUsersFromServer = () =>{\n  return fetch('/users',{method:\"GET\"})\n    .catch(convertNetworkError)\n    .then( convertError );\n  };\n\n\n\n"]},"metadata":{},"sourceType":"module"}